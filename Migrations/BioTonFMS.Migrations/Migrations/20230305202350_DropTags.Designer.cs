// <auto-generated />
using System;
using BioTonFMS.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BioTonFMSApp.Migrations
{
    [DbContext(typeof(BioTonDBContext))]
    [Migration("20230305202350_DropTags")]
    partial class DropTags
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BioTonFMS.Domain.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_fuel_type");

                    b.ToTable("fuel_type", (string)null);
                });

            modelBuilder.Entity("BioTonFMS.Domain.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("BioTonFMS.Domain.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BioTonFMS.Domain.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("formula");

                    b.Property<float>("FuelUse")
                        .HasColumnType("real")
                        .HasColumnName("fuel_use");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_visible");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SensorTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("sensor_type_id");

                    b.Property<int>("TrackerId")
                        .HasColumnType("integer")
                        .HasColumnName("tracker_id");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.Property<bool>("UseLastReceived")
                        .HasColumnType("boolean")
                        .HasColumnName("use_last_received");

                    b.Property<int?>("ValidationType")
                        .HasColumnType("integer")
                        .HasColumnName("validation_type");

                    b.Property<int?>("ValidatorId")
                        .HasColumnType("integer")
                        .HasColumnName("validator_id");

                    b.HasKey("Id")
                        .HasName("pk_sensors");

                    b.HasIndex("SensorTypeId")
                        .HasDatabaseName("ix_sensors_sensor_type_id");

                    b.HasIndex("TrackerId")
                        .HasDatabaseName("ix_sensors_tracker_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_sensors_unit_id");

                    b.HasIndex("ValidatorId")
                        .HasDatabaseName("ix_sensors_validator_id");

                    b.ToTable("sensors", (string)null);
                });

            modelBuilder.Entity("BioTonFMS.Domain.SensorGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_sensor_groups");

                    b.ToTable("sensor_groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Пробег"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Цифровые"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Показатели"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Двигатель"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Топливо"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Другие"
                        });
                });

            modelBuilder.Entity("BioTonFMS.Domain.SensorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SensorGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("sensor_group_id");

                    b.Property<int?>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("pk_sensor_types");

                    b.HasIndex("SensorGroupId")
                        .HasDatabaseName("ix_sensor_types_sensor_group_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_sensor_types_unit_id");

                    b.ToTable("sensor_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataType = 1,
                            Description = "Датчик, показывающий пройденное объектом расстояние. Может использоваться в детекторе поездок для определения поездок и стоянок.",
                            Name = "Датчик пробега",
                            SensorGroupId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 2,
                            DataType = 1,
                            Description = "Датчик, показывающий расстояние, пройденное объектом с момента получения от него последнего сообщения. Может использоваться в детекторе поездок для определения поездок и стоянок.",
                            Name = "Относительный одометр",
                            SensorGroupId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 3,
                            DataType = 0,
                            Description = "Датчик, показывающий, включено или выключено зажигание. Может использоваться в детекторе поездок для определения поездок и стоянок и в счетчиках пробега и моточасов. Кроме того, с помощью датчика зажигания можно выявлять сливы топлива на холостом ходу. Для этого необходимо указать норму расхода топлива на холостом ходу в поле Расход, литров в час.",
                            Name = "Датчик зажигания",
                            SensorGroupId = 2,
                            UnitId = 1
                        },
                        new
                        {
                            Id = 4,
                            DataType = 1,
                            Description = "Датчик, ненулевое значение которого позволяет отмечать сообщение как тревожное (SOS). Сообщения, зарегистрированные в системе до создания датчика, не отмечаются как тревожные.",
                            Name = "Тревожная кнопка",
                            SensorGroupId = 2,
                            UnitId = 1
                        },
                        new
                        {
                            Id = 5,
                            DataType = 0,
                            Description = "Датчик, определяющий состояние движения объектов в реальном времени. Состояние движения, определенное датчиком, показывается на карте и в рабочей области вкладки Мониторинг. Для этого должны быть активированы опции Заменять иконки знаками состояния движения в настройках пользователя и Состояние движения на вкладке Мониторинг соответственно. Показания датчика могут основываться на значениях скорости, зажигания, оборотов двигателя и т. д. Как и для других типов датчиков, для него можно указать параметр в виде выражения и настроить валидацию.",
                            Name = "Датчик мгновенного определения движения",
                            SensorGroupId = 2,
                            UnitId = 1
                        },
                        new
                        {
                            Id = 6,
                            DataType = 1,
                            Description = "Датчик, показывающий значение напряжения. По напряжению, например, может определяться температура или состояние зажигания.",
                            Name = "Датчик напряжения",
                            SensorGroupId = 3,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 7,
                            DataType = 1,
                            Description = "Датчик, с помощью которого можно определять массу перевозимого груза.",
                            Name = "Датчик веса",
                            SensorGroupId = 3,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 8,
                            DataType = 1,
                            Description = "Датчик, с помощью которого можно фиксировать ускорение по осям X, Y, Z, что позволяет определять факт столкновения, т. е. дорожно-транспортного происшествия.",
                            Name = "Акселерометр",
                            SensorGroupId = 3,
                            UnitId = 5
                        },
                        new
                        {
                            Id = 9,
                            DataType = 1,
                            Description = "Датчик, показывающий значение температуры или какого-либо другого параметра. Датчик температуры можно использовать для анализа приходящих значений. См. пример настройки.",
                            Name = "Датчик температуры",
                            SensorGroupId = 3,
                            UnitId = 6
                        },
                        new
                        {
                            Id = 10,
                            DataType = 1,
                            Description = "Коэффициент, который применяется для более точных вычислений уровня топлива при разной температуре в баке. См. пример настройки.",
                            Name = "Коэффициент температуры",
                            SensorGroupId = 3,
                            UnitId = 1
                        },
                        new
                        {
                            Id = 11,
                            DataType = 1,
                            Description = "Датчик, показывающий частоту оборотов двигателя.",
                            Name = "Датчик оборотов двигателя",
                            SensorGroupId = 4,
                            UnitId = 7
                        },
                        new
                        {
                            Id = 12,
                            Description = "Датчик, с помощью которого можно определять коэффициент движения под нагрузкой, используемый для вычисления расхода топлива по расчету. Может выступать в качестве понижающего коэффициента (при значениях от 0 до 1). Для этого датчика можно указать любую единицу измерения.",
                            Name = "Датчик полезной работы двигателя",
                            SensorGroupId = 4
                        },
                        new
                        {
                            Id = 13,
                            DataType = 1,
                            Description = "Датчик, показывающий общее количество наработанных моточасов.",
                            Name = "Абсолютные моточасы",
                            SensorGroupId = 4,
                            UnitId = 8
                        },
                        new
                        {
                            Id = 14,
                            DataType = 1,
                            Description = "Датчик, показывающий количество моточасов с учетом коэффициента интенсивности работы. См. пример настройки.",
                            Name = "Относительные моточасы",
                            SensorGroupId = 4,
                            UnitId = 8
                        },
                        new
                        {
                            Id = 15,
                            DataType = 1,
                            Description = "Датчик, который показывает накапливаемое значение импульсов. Для пересчета приходящего значения в количество потраченного топлива необходимо настроить таблицу расчета и активировать опцию Рассчитывать расход топлива по датчику. Для датчиков этого типа таблица расчета применяется к разнице между двумя соседними сообщениями. Если устройство передает не накапливаемое значение импульсов, а количество импульсов между сообщениями, то необходимо использовать датчик мгновенного расхода топлива.",
                            Name = "Импульсный датчик расхода топлива",
                            SensorGroupId = 5,
                            UnitId = 9
                        },
                        new
                        {
                            Id = 16,
                            DataType = 1,
                            Description = "Датчик, который показывает расход топлива за весь период эксплуатации автомобиля. Чтобы получить данные о расходе топлива за конкретный период, необходимо снять показания с датчика в конце выбранного периода и вычесть показания датчика в начале периода. В свойствах датчика необходимо активировать опцию Рассчитывать расход топлива по датчику.",
                            Name = "Датчик абсолютного расхода топлива",
                            SensorGroupId = 5,
                            UnitId = 9
                        },
                        new
                        {
                            Id = 17,
                            DataType = 1,
                            Description = "Датчик, показывающий количество потраченного топлива с момента предыдущего измерения (сообщения). В свойствах датчика необходимо активировать опцию Рассчитывать расход топлива по датчику.",
                            Name = "Датчик мгновенного расхода топлива",
                            SensorGroupId = 5,
                            UnitId = 9
                        },
                        new
                        {
                            Id = 18,
                            DataType = 1,
                            Description = "Датчик, определяющий уровень топлива в баке. В свойствах датчика необходимо активировать опцию Рассчитывать расход топлива по датчику. См. пример настройки.",
                            Name = "Датчик уровня топлива",
                            SensorGroupId = 5,
                            UnitId = 9
                        },
                        new
                        {
                            Id = 19,
                            DataType = 1,
                            Description = "Датчик, предназначенный для расчета количества топлива в баке. При расчете разница значений импульсов из двух соседних сообщений делится на разницу времени между ними.",
                            Name = "Импульсный датчик уровня топлива",
                            SensorGroupId = 5,
                            UnitId = 9
                        },
                        new
                        {
                            Id = 20,
                            Description = "Датчик, позволяющий определять интенсивность пассажиропотока или количество некоторых действий (например, открытие и закрытие двери). Есть несколько типов таких датчиков:",
                            Name = "Счетчик",
                            SensorGroupId = 6
                        },
                        new
                        {
                            Id = 21,
                            Description = "Датчик, который можно настроить для измерения любого показателя. Для произвольного датчика можно указать любую единицу измерения.",
                            Name = "Произвольный датчик",
                            SensorGroupId = 6
                        },
                        new
                        {
                            Id = 22,
                            DataType = 2,
                            Description = "Датчик, с помощью которого можно фиксировать назначение водителя на объект.",
                            Name = "Назначение водителя",
                            SensorGroupId = 6,
                            UnitId = 1
                        },
                        new
                        {
                            Id = 23,
                            DataType = 2,
                            Description = "Датчик, с помощью которого можно фиксировать назначение прицепа на объект.",
                            Name = "Назначение прицепа",
                            SensorGroupId = 6,
                            UnitId = 1
                        });
                });

            modelBuilder.Entity("BioTonFMS.Domain.Tracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer")
                        .HasColumnName("external_id");

                    b.Property<string>("Imei")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("imei");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("SimNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("sim_number");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("TrackerType")
                        .HasColumnType("integer")
                        .HasColumnName("tracker_type");

                    b.HasKey("Id")
                        .HasName("pk_trackers");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("ix_trackers_external_id");

                    b.ToTable("trackers", (string)null);
                });

            modelBuilder.Entity("BioTonFMS.Domain.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviated")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("abbreviated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.ToTable("units", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviated = "",
                            Name = "Безразмерная величина"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviated = "км",
                            Name = "Километры"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviated = "V",
                            Name = "Вольты"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviated = "т",
                            Name = "Тонны"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviated = "g",
                            Name = "g"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviated = "C°",
                            Name = "Градусы цельсия"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviated = "об/мин",
                            Name = "Обороты в минуту"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviated = "ч",
                            Name = "Часы"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviated = "л",
                            Name = "Литры"
                        });
                });

            modelBuilder.Entity("BioTonFMS.Domain.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("fuel_type_id");

                    b.Property<string>("InventoryNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("inventory_number");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("make");

                    b.Property<int?>("ManufacturingYear")
                        .HasColumnType("integer")
                        .HasColumnName("manufacturing_year");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("registration_number");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("serial_number");

                    b.Property<int?>("TrackerId")
                        .HasColumnType("integer")
                        .HasColumnName("tracker_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int?>("VehicleGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_group_id");

                    b.Property<int>("VehicleSubType")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_sub_type");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("FuelTypeId")
                        .HasDatabaseName("ix_vehicles_fuel_type_id");

                    b.HasIndex("TrackerId")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicles_tracker_id");

                    b.HasIndex("VehicleGroupId")
                        .HasDatabaseName("ix_vehicles_vehicle_group_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("BioTonFMS.Domain.VehicleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_group");

                    b.ToTable("vehicle_group", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BioTonFMS.Domain.Sensor", b =>
                {
                    b.HasOne("BioTonFMS.Domain.SensorType", "SensorType")
                        .WithMany()
                        .HasForeignKey("SensorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sensors_sensor_types_sensor_type_id");

                    b.HasOne("BioTonFMS.Domain.Tracker", "Tracker")
                        .WithMany("Sensors")
                        .HasForeignKey("TrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sensors_trackers_tracker_id");

                    b.HasOne("BioTonFMS.Domain.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sensors_units_unit_id");

                    b.HasOne("BioTonFMS.Domain.Sensor", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatorId")
                        .HasConstraintName("fk_sensors_sensors_validator_id");

                    b.Navigation("SensorType");

                    b.Navigation("Tracker");

                    b.Navigation("Unit");

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("BioTonFMS.Domain.SensorType", b =>
                {
                    b.HasOne("BioTonFMS.Domain.SensorGroup", "SensorGroup")
                        .WithMany("SensorTypes")
                        .HasForeignKey("SensorGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sensor_types_sensor_groups_sensor_group_id");

                    b.HasOne("BioTonFMS.Domain.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .HasConstraintName("fk_sensor_types_units_unit_id");

                    b.Navigation("SensorGroup");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BioTonFMS.Domain.Vehicle", b =>
                {
                    b.HasOne("BioTonFMS.Domain.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_fuel_type_fuel_type_id");

                    b.HasOne("BioTonFMS.Domain.Tracker", "Tracker")
                        .WithOne("Vehicle")
                        .HasForeignKey("BioTonFMS.Domain.Vehicle", "TrackerId")
                        .HasConstraintName("fk_vehicles_trackers_tracker_id");

                    b.HasOne("BioTonFMS.Domain.VehicleGroup", "VehicleGroup")
                        .WithMany()
                        .HasForeignKey("VehicleGroupId")
                        .HasConstraintName("fk_vehicles_vehicle_group_vehicle_group_id");

                    b.Navigation("FuelType");

                    b.Navigation("Tracker");

                    b.Navigation("VehicleGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BioTonFMS.Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BioTonFMS.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BioTonFMS.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BioTonFMS.Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("BioTonFMS.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BioTonFMS.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("BioTonFMS.Domain.SensorGroup", b =>
                {
                    b.Navigation("SensorTypes");
                });

            modelBuilder.Entity("BioTonFMS.Domain.Tracker", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
